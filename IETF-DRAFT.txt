Internet-Draft              QASWP Specification            N. Nedovodin
Intended status: Experimental                           CPUTER Inc.
Expires: 30 April 2026                                  October 2025

          Quantum-Authenticated Neural Semantic Weaving Protocol
                                (QASWP)

Abstract

   QASWP is a transport-layer protocol that integrates quantum key
   exchange, post-quantum cryptography, and neural semantic compression.
   A quantum step yields shared secrets and detects interception; a
   classical PQ handshake authenticates endpoints and derives session
   keys; application data is exchanged as encrypted semantic packets
   produced by a shared context-driven model. Optional zero-knowledge
   proofs provide verifiable model integrity. This document specifies
   the handshake, record format, state machines, and security
   considerations.

Status of This Memo

   This Internet-Draft is submitted for discussion within the IRTF
   Quantum Internet Research Group (QIRG).  It is not an IETF standard.
   This document is a work-in-progress and may be updated or replaced.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as authors
   of the document.  All rights reserved.

Table of Contents

   1.  Introduction
   2.  Terminology
   3.  Protocol Overview
   4.  Handshake
       4.1.  Quantum Key Exchange (QKE)
       4.2.  Classical Exchange and Key Schedule
       4.3.  Model Negotiation and Proofs
   5.  Record Protocol
       5.1.  Packet Format
       5.2.  Context Management
   6.  State Machines
   7.  Security Considerations
   8.  IANA Considerations
   9.  References
   10. Acknowledgments

1.  Introduction

   QASWP targets deployments where both high assurance (including
   post-quantum) and bandwidth efficiency are required.  Endpoints use a
   quantum mechanism to derive shared entropy and detect active attacks,
   then perform a classical handshake using PQ algorithms.  Data is
   encoded by a shared semantic model to reduce bits-on-the-wire toward
   the conditional entropy of the message given the shared context.

2.  Terminology

   AEAD:  Authenticated Encryption with Associated Data.
   Context:  Shared state that conditions the semantic model.
   Model:  A shared encoder/decoder that maps (M, C) -> Z and (Z, C) -> M'.
   QKD/QKE:  Quantum Key Distribution / Exchange.
   PQ:   Post-quantum (cryptography).
   SNARK:  Succinct non-interactive zero-knowledge argument.

3.  Protocol Overview

   The protocol comprises two phases:

   * Handshake:  QKE to obtain K_q; classical PQ exchange to authenticate
     identities, negotiate parameters (including model ID), and derive
     a master secret MS and session keys via KDF bound to the transcript.

   * Record Protocol:  Messages are encoded to semantic payloads Z using
     the agreed model and context, then protected with AEAD under
     session keys.  Context evolves deterministically on both endpoints.
     Optional quantum-derived shared randomness periodically seeds
     deterministic inference to maintain alignment.

4.  Handshake

4.1.  Quantum Key Exchange (QKE)

   Implementations interface a QKD subsystem to obtain K_q and a quality
   indicator (e.g., QBER).  If QKE fails policy, endpoints abort or
   fall back to classical-only operation.

4.2.  Classical Exchange and Key Schedule

   ClientHello:
      version, nonces, model proposals, client identity (certificate or
      PSK id), PQ signature over parameters, and MAC keyed from K_q.

   ServerHello:
      selection, server identity and signature, optional KEM ciphertext
      to establish K_pq, MAC keyed from K_q.

   Finished:
      Both sides compute MS = KDF( K_q || K_pq, transcript ) and derive
      K_enc, K_mac, K_ctx.  Each sends a Finished tag (MAC over the
      transcript with keys derived from MS).

4.3.  Model Negotiation and Proofs

   Endpoints agree a model ID or parameter hash.  In high-assurance
   mode, each may send a succinct proof attesting model integrity or
   protocol adherence.  If proof verification fails, abort.

5.  Record Protocol

5.1.  Packet Format

   The following abstract format is RECOMMENDED:

   +-------------------------------+-----------+-------------------+
   | Seq (32)                      | Flags(8)  | CtxID(8)          |
   +-------------------------------+-----------+-------------------+
   | CiphertextLen (16)            |
   +-------------------------------+--------------------------------
   | AEAD Ciphertext (variable)                                     |
   +----------------------------------------------------------------+
   | AEAD Tag (e.g., 16 bytes)                                      |
   +----------------------------------------------------------------+

   The AEAD AAD MUST include all header fields.  Flags bit 0 indicates
   a context reset (I-frame).  Bit 1 indicates that a proof follows.

5.2.  Context Management

   Context MUST evolve deterministically on both sides.  Endpoints
   SHOULD periodically include encrypted context hashes; on mismatch,
   perform a context reset.  Implementations MAY use quantum-derived
   seeds to align any stochastic branches.

6.  State Machines

   Client (simplified):
     Start -> QKE -> ClientHello -> wait(ServerHello) -> verify ->
     compute keys -> verify Finished -> send Finished -> Established.

   Server (simplified):
     Start -> QKE -> wait(ClientHello) -> verify -> ServerHello ->
     compute keys -> send Finished -> wait(Finished) -> Established.

7.  Security Considerations

   * Confidentiality: AEAD with 256-bit keys; hybrid secrets (K_q + PQ).
   * Integrity/Authentication: PQ signatures in handshake; AEAD tags;
     transcript binding prevents downgrade.
   * Forward secrecy: rekey from fresh quantum outcomes / ephemeral PQ.
   * ZK proofs: optional, to attest model integrity without disclosure.
   * DoS: limit proof sizes/frequency; rate-limit unauthenticated work.
   * Side channels: pad lengths if needed; enforce deterministic
     inference; cap context growth; clear abort on verify failures.

8.  IANA Considerations

   This document requests no IANA actions at this time.

9.  References

   (Informative references to QKD, PQC, semantic communication, and
   succinct proof systems are omitted in this draft snapshot.)

10. Acknowledgments

   The author thanks colleagues at CPUTER Inc. for discussions and
   prototypes that informed this specification.
