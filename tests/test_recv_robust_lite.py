import os
import random

import pytest

from src.neural import VOCAB
from src.qaswp import QASWPSession


def _handshake_server() -> QASWPSession:
    server = QASWPSession(is_client=False)
    hello = server.client_pass_1()
    response = server.server_pass_2(hello)
    assert response["status"] == "ok"
    finish = server.client_pass_3(response)
    assert finish["status"] == "ok"
    return server


@pytest.mark.robust
def test_receive_woven_packet_lite_random_inputs_100():
    random.seed(1234)
    server = _handshake_server()

    def placeholder_packet() -> dict:
        choice = random.choice(["zero", "unflushed", "missing"])
        if choice == "zero":
            return {
                "nonce": b"",
                "encrypted_payload": b"",
                "flushed": random.choice([True, False]),
                "wire_len": 0,
            }
        if choice == "unflushed":
            length = random.choice([0, 1, 5, 17, 64, 128])
            return {
                "nonce": os.urandom(length) if length else b"",
                "encrypted_payload": os.urandom(length) if length else b"",
                "flushed": False,
                "wire_len": length,
            }
        # missing required fields: ensures early return without decrypt
        payload_len = random.choice([0, 1, 5, 32, 64, 128, 256])
        return {
            "nonce": b"",  # falsy â†’ treated as missing
            "encrypted_payload": os.urandom(payload_len),
            "flushed": True,
            "wire_len": payload_len,
        }

    for _ in range(100):
        packet = placeholder_packet()
        try:
            output = server.receive_woven_packet(packet)
        except Exception as exc:
            raise AssertionError(
                "receive_woven_packet raised on lite input: "
                f"{type(exc).__name__}: {exc}"
            ) from exc
        assert output is None or isinstance(output, dict)

    # Ensure a real encrypted batch generated by weave_packet can be received.
    packet = None
    for _ in range(64):
        candidate = server.weave_packet([VOCAB["GET"]])
        if candidate and candidate.get("wire_len", 0):
            packet = candidate
    if not packet or packet.get("wire_len", 0) == 0:
        packet = server.flush_confirmations()
    assert packet and packet.get("wire_len", 0) > 0
    result = server.receive_woven_packet(packet)
    assert isinstance(result, dict)
